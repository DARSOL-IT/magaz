import logging
import asyncio
import os
import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton, Message,
                           CallbackQuery)
from datetime import datetime
# -------------------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è) --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN",
                      "7234722391:AAGYcL3o5SDATbDo1eyGm1sgEwihoCgrsMw")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID",
                              "-1002640664592"))  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–æ–≤
BANK_CARD = os.getenv("BANK_CARD",
                      "2200 7006 3398 7515")  # –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
REVIEW_CHANNEL_LINK = os.getenv("REVIEW_CHANNEL_LINK",
                                "https://t.me/otzovy_darsol")
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "Begi_forest_begii")
DB_PATH = os.getenv("DB_PATH", "bot_database.db")

# -------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ FSM --------------------
bot = Bot(token=BOT_TOKEN,
          default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
BOT_USERNAME = None  # –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ


# -------------------- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è --------------------
class BuyStars(StatesGroup):
    waiting_for_username = State()


class AdminPromo(StatesGroup):
    add_code = State()
    add_percent = State()


class AdminMessage(StatesGroup):
    waiting_for_message = State()


# -------------------- –ú–µ–Ω—é --------------------
def main_menu_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ãüåü", callback_data="buy"),
            InlineKeyboardButton(text="–ü—Ä–æ–º–æ–∫–æ–¥üéüÔ∏è", callback_data="promo")
        ],
        [
            InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ãüìö", callback_data="reviews"),
            InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí≠", callback_data="support")
        ],
        [
            InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üë•",
                                 callback_data="referral")
        ]
    ])
    return kb


def back_to_menu():
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìã", callback_data="main")
    ]])


# –í–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω –¥–ª—è –∑–≤–µ–∑–¥ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞)
PRICE_OPTIONS = [(50, 75), (75, 115), (100, 150), (150, 225), (250, 375),
                 (350, 525), (500, 750), (750, 1125), (1000, 1500),
                 (5000, 7500), (10000, 15000), (35000, 52500), (50000, 75000)]


def buy_menu_keyboard(discount=0):
    buttons = []
    row = []
    for i, (amount, price) in enumerate(PRICE_OPTIONS):
        price_disc = price * (100 - discount) // 100
        button = InlineKeyboardButton(
            text=f"{amount} üåü –∑–∞ {price_disc} ‚ÇΩ",
            callback_data=f"buy_{amount}_{price_disc}")
        row.append(button)
        if len(row) == 2 or i == len(PRICE_OPTIONS) - 1:
            buttons.append(row)
            row = []

    buttons.append(
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìã", callback_data="main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# -------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î --------------------
async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.executescript(r"""
        CREATE TABLE IF NOT EXISTS users (
            user_id     INTEGER PRIMARY KEY,
            username    TEXT,
            first_name  TEXT,
            last_name   TEXT,
            joined_at   TEXT
        );
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            buyer_id INTEGER,
            target_username TEXT,
            amount INTEGER,
            price INTEGER,
            status TEXT,
            order_time TEXT
        );
        CREATE TABLE IF NOT EXISTS promo_codes (
            code TEXT PRIMARY KEY,
            discount_percent INTEGER
        );
        CREATE TABLE IF NOT EXISTS user_discounts (
            user_id INTEGER PRIMARY KEY,
            discount_percent INTEGER
        );
        CREATE TABLE IF NOT EXISTS referrals (
            code TEXT PRIMARY KEY,
            user_id INTEGER
        );
        CREATE TABLE IF NOT EXISTS user_referrals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            referrer_id INTEGER,
            referred_id INTEGER,
            commission REAL
        );
        """)
        await db.commit()
    global BOT_USERNAME
    me = await bot.get_me()
    BOT_USERNAME = me.username
    logger.info(f"Bot initialized: @{BOT_USERNAME}")


# -------------------- –£—Ç–∏–ª–∏—Ç—ã --------------------
async def get_discount(user_id: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT discount_percent FROM user_discounts WHERE user_id = ?",
            (user_id, ))
        row = await cur.fetchone()
    return row[0] if row else 0


async def update_referral_commission(order):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–º–∏—Å—Å–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ"""
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT referrer_id FROM user_referrals WHERE referred_id = ?",
            (order['buyer_id'], ))
        row = await cur.fetchone()
        if row:
            referrer_id = row[0]
            commission = order['price'] * 0.03  # 3% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
            await db.execute(
                "UPDATE user_referrals SET commission = commission + ? "
                "WHERE referrer_id = ? AND referred_id = ?",
                (commission, referrer_id, order['buyer_id']))
            await db.commit()
            await bot.send_message(
                referrer_id,
                f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {commission} ‚ÇΩ –∫–æ–º–∏—Å—Å–∏–∏."
            )


# -------------------- –•–µ–Ω–¥–ª–µ—Ä—ã --------------------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, joined_at) VALUES (?, ?, ?, ?, datetime('now'))",
            (message.from_user.id, message.from_user.username
             or '', message.from_user.first_name
             or '', message.from_user.last_name or ''))
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É
        args = message.text.split(
            maxsplit=1)[1] if len(message.text.split()) > 1 else None
        if args:
            cur = await db.execute(
                "SELECT user_id FROM referrals WHERE code = ?", (args, ))
            row = await cur.fetchone()
            if row and row[0] != message.from_user.id:
                await db.execute(
                    "INSERT OR IGNORE INTO user_referrals (referrer_id, referred_id, commission) VALUES (?, ?, 0)",
                    (row[0], message.from_user.id))
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –Ω–æ–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–µ
                await bot.send_message(
                    row[0],
                    f"–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! {message.from_user.first_name} (@{message.from_user.username or '–±–µ–∑ username'})"
                )
        # —Å–æ–∑–¥–∞—ë–º —Å–≤–æ–π –∫–æ–¥, –µ—Å–ª–∏ –Ω–µ—Ç
        cur = await db.execute("SELECT code FROM referrals WHERE user_id = ?",
                               (message.from_user.id, ))
        if not await cur.fetchone():
            code = os.urandom(4).hex()
            await db.execute(
                "INSERT INTO referrals (code, user_id) VALUES (?, ?)",
                (code, message.from_user.id))
        await db.commit()
    await message.answer(
        "–ë–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º –∑–≤—ë–∑–¥üåü (–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é —É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –µ—Å–ª–∏ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç)",
        reply_markup=main_menu_keyboard())


@dp.callback_query(F.data == "main")
async def back_main(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await call.message.edit_text(
        "–ë–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º –∑–≤—ë–∑–¥üåü",
        reply_markup=main_menu_keyboard())
    await call.answer()


@dp.callback_query(F.data == "buy")
async def cb_buy(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã'"""
    discount = await get_discount(call.from_user.id)
    await call.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥{' (—Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–π —Å–∫–∏–¥–∫–∏)' if discount else ''}:",
        reply_markup=buy_menu_keyboard(discount))
    await call.answer()


@dp.callback_query(F.data.startswith("buy_"))
async def cb_buy_amount(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    _, amount, price = call.data.split("_")
    await state.update_data(amount=int(amount), price=int(price))
    await state.set_state(BuyStars.waiting_for_username)
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ @username –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã:")
    await call.answer()


@dp.message(BuyStars.waiting_for_username)
async def process_username(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥"""
    data = await state.get_data()
    amount = data['amount']
    price = data['price']
    target = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ username
    if not target.startswith('@') and '@' not in target:
        target = '@' + target

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "INSERT INTO orders (buyer_id, target_username, amount, price, status, order_time) VALUES (?, ?, ?, ?, 'pending', datetime('now'))",
            (message.from_user.id, target, amount, price))
        order_id = cur.lastrowid
        await db.commit()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                             callback_data=f"order_done_{order_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                             callback_data=f"order_cancel_{order_id}")
    ]])

    await bot.send_message(
        ADMIN_CHAT_ID, f"üí´ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{message.from_user.username or 'no_username'} ({message.from_user.id})\n"
        f"üéØ –¶–µ–ª—å: {target}\n"
        f"üåü –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}\n"
        f"üí∞ –°—É–º–º–∞: {price} ‚ÇΩ\n"
        f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
        reply_markup=admin_markup)

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    await message.answer(
        f"<b>–í–∞—à –∑–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:\n"
        f"1. –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{BANK_CARD}</code>\n"
        f"2. –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{price} ‚ÇΩ</b>\n"
        f"3. <b>–í–ê–ñ–ù–û:</b> –≤–ø–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É –≤–∞—à @username –∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ #{order_id}\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ. –ê–¥–º–∏–Ω—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –ø–ª–∞—Ç–µ–∂ –∏ –Ω–∞—á–∏—Å–ª—è—Ç –∑–≤—ë–∑–¥—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.",
        reply_markup=back_to_menu())
    await state.clear()


@dp.callback_query(F.data.startswith("order_done_"))
async def cb_order_done(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    order_id = int(call.data.split("_")[-1])
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE orders SET status = 'done' WHERE id = ?",
                         (order_id, ))
        cur = await db.execute(
            "SELECT buyer_id, target_username, amount, price FROM orders WHERE id = ?",
            (order_id, ))
        row = await cur.fetchone()
        if row:
            order = {
                'buyer_id': row[0],
                'target_username': row[1],
                'amount': row[2],
                'price': row[3]
            }
            await db.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            await update_referral_commission(order)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            await bot.send_message(
                order['buyer_id'], f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                f"üåü {order['amount']} –∑–≤—ë–∑–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç {order['target_username']}.\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ë—É–¥–µ–º —Ä–∞–¥—ã –æ—Ç–∑—ã–≤—É (–µ–≥–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É).",
                reply_markup=main_menu_keyboard())
            await call.answer("‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            await call.message.edit_text(call.message.text +
                                         "\n\n‚úÖ <b>–ó–ê–ö–ê–ó –í–´–ü–û–õ–ù–ï–ù</b>")
        else:
            await call.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@dp.callback_query(F.data.startswith("order_cancel_"))
async def cb_order_cancel(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    order_id = int(call.data.split("_")[-1])
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE orders SET status = 'cancelled' WHERE id = ?",
                         (order_id, ))
        cur = await db.execute("SELECT buyer_id FROM orders WHERE id = ?",
                               (order_id, ))
        row = await cur.fetchone()
        if row:
            buyer_id = row[0]
            await db.commit()
            await bot.send_message(
                buyer_id, f"‚ùå <b>–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                reply_markup=main_menu_keyboard())
            await call.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            await call.message.edit_text(call.message.text +
                                         "\n\n‚ùå <b>–ó–ê–ö–ê–ó –û–¢–ú–ï–ù–ï–ù</b>")
        else:
            await call.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@dp.callback_query(F.data == "promo")
async def cb_promo(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–º–æ–∫–æ–¥'"""
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏:",
                                 reply_markup=back_to_menu())
    await call.answer()


@dp.message(lambda m: m.text and not m.text.startswith("/"))
async def process_promo(m: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    code = m.text.strip()
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT discount_percent FROM promo_codes WHERE code = ?",
            (code, ))
        row = await cur.fetchone()

    if not row:
        await m.answer("‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç.",
                       reply_markup=main_menu_keyboard())
    else:
        percent = row[0]
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(
                "INSERT OR REPLACE INTO user_discounts (user_id, discount_percent) VALUES (?, ?)",
                (m.from_user.id, percent))
            await db.commit()
        await m.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{code}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: <b>{percent}%</b>\n"
            f"–°–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–µ –∑–≤—ë–∑–¥.",
            reply_markup=main_menu_keyboard())


@dp.callback_query(F.data == "reviews")
async def cb_reviews(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–∑—ã–≤—ã'"""
    await call.message.edit_text(
        f"üìö <b>–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n{REVIEW_CHANNEL_LINK}",
        reply_markup=back_to_menu())
    await call.answer()


@dp.callback_query(F.data == "support")
async def cb_support(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'"""
    await call.message.edit_text(
        f"üí≠ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: @{SUPPORT_USERNAME}",
        reply_markup=back_to_menu())
    await call.answer()


@dp.callback_query(F.data == "referral")
async def cb_referral(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'"""
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT code FROM referrals WHERE user_id = ?",
                               (call.from_user.id, ))
        code_row = await cur.fetchone()
        code = code_row[0] if code_row else None

        cur2 = await db.execute(
            "SELECT COUNT(*), COALESCE(SUM(commission),0) FROM user_referrals WHERE referrer_id = ?",
            (call.from_user.id, ))
        stats_row = await cur2.fetchone()
        cnt = stats_row[0] if stats_row else 0
        earned = stats_row[1] if stats_row and stats_row[1] else 0

    if code:
        link = f"https://t.me/{BOT_USERNAME}?start={code}"
        text = (
            f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ <b>3%</b> –æ—Ç –∫–∞–∂–¥–æ–π –∏—Ö –ø–æ–∫—É–ø–∫–∏!\n\n"
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"–ü—Ä–∏–≤–µ–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{cnt}</b>\n"
            f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{earned} ‚ÇΩ</b>\n\n"
            f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n{link}")

        withdraw_button = None
        if earned >= 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
            withdraw_markup = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text=f"üí∏ –í—ã–≤–µ—Å—Ç–∏ {earned} ‚ÇΩ",
                                         callback_data="withdraw_ref")
                ],
                                 [
                                     InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìã",
                                                          callback_data="main")
                                 ]])
            await call.message.edit_text(text, reply_markup=withdraw_markup)
        else:
            await call.message.edit_text(text, reply_markup=back_to_menu())
    else:
        await call.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_menu())
    await call.answer()


@dp.callback_query(F.data == "withdraw_ref")
async def cb_withdraw_ref(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"""
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT COALESCE(SUM(commission),0) FROM user_referrals WHERE referrer_id = ?",
            (call.from_user.id, ))
        row = await cur.fetchone()
        commission = row[0] if row and row[0] else 0

        if commission >= 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—ã–≤–æ–¥
            admin_markup = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ",
                    callback_data=f"paid_ref_{call.from_user.id}")
            ]])

            await bot.send_message(
                ADMIN_CHAT_ID, f"üí∏ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{call.from_user.username or 'no_username'} ({call.from_user.id})\n"
                f"üí∞ –°—É–º–º–∞: {commission} ‚ÇΩ\n"
                f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
                reply_markup=admin_markup)

            # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await call.message.edit_text(
                f"üí∏ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {commission} ‚ÇΩ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b>\n\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã.",
                reply_markup=back_to_menu())
            await call.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            await call.answer(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 100 ‚ÇΩ. –£ –≤–∞—Å: {commission} ‚ÇΩ",
                show_alert=True)


# -------------------- –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∫–∏ --------------------
@dp.message(Command("addpromo"), lambda m: m.chat.id == ADMIN_CHAT_ID)
async def cmd_addpromo(message: Message, state: FSMContext):
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
    await state.set_state(AdminPromo.add_code)


@dp.message(AdminPromo.add_code, lambda m: m.chat.id == ADMIN_CHAT_ID)
async def process_add_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∞–¥–º–∏–Ω–æ–º"""
    code = message.text.strip()
    await state.update_data(code=code)
    await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (–≤ %):")
    await state.set_state(AdminPromo.add_percent)


@dp.message(AdminPromo.add_percent, lambda m: m.chat.id == ADMIN_CHAT_ID)
async def process_add_percent(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    try:
        percent = int(message.text.strip())
        if not 1 <= percent <= 100:
            await message.reply(
                "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        data = await state.get_data()
        code = data['code']

        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(
                "INSERT OR REPLACE INTO promo_codes (code, discount_percent) VALUES (?, ?)",
                (code, percent))
            await db.commit()

        await message.reply(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{code}</b> —Å {percent}% —Å–∫–∏–¥–∫–æ–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            parse_mode=ParseMode.HTML)
        await state.clear()
    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


@dp.message(Command("delpromo"), lambda m: m.chat.id == ADMIN_CHAT_ID)
async def cmd_delpromo(message: Message):
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delpromo [–∫–æ–¥]")
        return

    code = args[1].strip()
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT discount_percent FROM promo_codes WHERE code = ?",
            (code, ))
        row = await cur.fetchone()
        if not row:
            await message.reply(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ <b>{code}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                parse_mode=ParseMode.HTML)
        else:
            await db.execute("DELETE FROM promo_codes WHERE code = ?",
                             (code, ))
            await db.commit()
            await message.reply(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{code}</b> —É–¥–∞–ª–µ–Ω.",
                                parse_mode=ParseMode.HTML)


@dp.message(Command("stats"), lambda m: m.chat.id == ADMIN_CHAT_ID)
async def cmd_stats(message: Message):
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur = await db.execute("SELECT COUNT(*) FROM users")
        users_count = (await cur.fetchone())[0]

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        cur = await db.execute(
            "SELECT COUNT(*), SUM(CASE WHEN status='done' THEN 1 ELSE 0 END) FROM orders"
        )
        orders_row = await cur.fetchone()
        orders_count = orders_row[0]
        completed_orders = orders_row[1] or 0

        # –°—É–º–º–∞ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        cur = await db.execute(
            "SELECT COALESCE(SUM(price), 0) FROM orders WHERE status='done'")
        total_revenue = (await cur.fetchone())[0] or 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        cur = await db.execute(
            "SELECT COUNT(*), COALESCE(SUM(price), 0) FROM orders "
            "WHERE status='done' AND order_time >= datetime('now', '-1 day')")
        today_row = await cur.fetchone()
        today_orders = today_row[0]
        today_revenue = today_row[1] or 0

    await message.reply(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>\n"
        f"üìù –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{orders_count}</b>\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: <b>{completed_orders}</b>\n"
        f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{total_revenue} ‚ÇΩ</b>\n\n"
        f"üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n"
        f"üìù –ó–∞–∫–∞–∑–æ–≤: <b>{today_orders}</b>\n"
        f"üí∞ –í—ã—Ä—É—á–∫–∞: <b>{today_revenue} ‚ÇΩ</b>",
        parse_mode=ParseMode.HTML)


@dp.message(Command("broadcast"), lambda m: m.chat.id == ADMIN_CHAT_ID)
async def cmd_broadcast(message: Message, state: FSMContext):
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    await state.set_state(AdminMessage.waiting_for_message)


@dp.message(AdminMessage.waiting_for_message,
            lambda m: m.chat.id == ADMIN_CHAT_ID)
async def process_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await state.update_data(message=message.text, html_text=message.html_text)

    confirmation_markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                             callback_data="confirm_broadcast"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
    ]])

    await message.reply(
        f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n{message.html_text}\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=confirmation_markup,
        parse_mode=ParseMode.HTML)


@dp.callback_query(F.data == "confirm_broadcast")
async def confirm_broadcast(call: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    broadcast_text = data.get('html_text', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏')

    await call.message.edit_text(
        "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id FROM users")
        users = await cur.fetchall()

    success_count = 0
    error_count = 0

    for user in users:
        user_id = user[0]
        try:
            await bot.send_message(user_id,
                                   broadcast_text,
                                   parse_mode=ParseMode.HTML)
            success_count += 1
        except Exception as e:
            logger.error(f"Failed to send message to user {user_id}: {e}")
            error_count += 1

        # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ñ–ª—É–¥–∞
        await asyncio.sleep(0.1)

    await call.message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {error_count}",
        parse_mode=ParseMode.HTML)
    await state.clear()


@dp.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast(call: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await call.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()


# -------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ --------------------
async def on_startup(bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    await init_db()
    logger.info("Bot started")


async def on_shutdown(bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot stopped")


async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main())
